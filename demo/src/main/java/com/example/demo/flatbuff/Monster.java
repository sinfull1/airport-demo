// automatically generated by the FlatBuffers compiler, do not modify

package com.example.demo.flatbuff;

import com.google.flatbuffers.*;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Monster extends Table {
    public static void ValidateVersion() {
        Constants.FLATBUFFERS_23_1_4();
    }

    public static Monster getRootAsMonster(ByteBuffer _bb) {
        return getRootAsMonster(_bb, new Monster());
    }

    public static Monster getRootAsMonster(ByteBuffer _bb, Monster obj) {
        _bb.order(ByteOrder.LITTLE_ENDIAN);
        return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb));
    }

    public void __init(int _i, ByteBuffer _bb) {
        __reset(_i, _bb);
    }

    public Monster __assign(int _i, ByteBuffer _bb) {
        __init(_i, _bb);
        return this;
    }

    public short mana() {
        int o = __offset(6);
        return o != 0 ? bb.getShort(o + bb_pos) : 150;
    }

    public short hp() {
        int o = __offset(8);
        return o != 0 ? bb.getShort(o + bb_pos) : 100;
    }

    public String name() {
        int o = __offset(10);
        return o != 0 ? __string(o + bb_pos) : null;
    }

    public ByteBuffer nameAsByteBuffer() {
        return __vector_as_bytebuffer(10, 1);
    }

    public ByteBuffer nameInByteBuffer(ByteBuffer _bb) {
        return __vector_in_bytebuffer(_bb, 10, 1);
    }

    public int inventory(int j) {
        int o = __offset(14);
        return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0;
    }

    public int inventoryLength() {
        int o = __offset(14);
        return o != 0 ? __vector_len(o) : 0;
    }

    public ByteVector inventoryVector() {
        return inventoryVector(new ByteVector());
    }

    public ByteVector inventoryVector(ByteVector obj) {
        int o = __offset(14);
        return o != 0 ? obj.__assign(__vector(o), bb) : null;
    }

    public ByteBuffer inventoryAsByteBuffer() {
        return __vector_as_bytebuffer(14, 1);
    }

    public ByteBuffer inventoryInByteBuffer(ByteBuffer _bb) {
        return __vector_in_bytebuffer(_bb, 14, 1);
    }

    public byte color() {
        int o = __offset(16);
        return o != 0 ? bb.get(o + bb_pos) : 3;
    }

    public byte testType() {
        int o = __offset(18);
        return o != 0 ? bb.get(o + bb_pos) : 0;
    }

    public Table test(Table obj) {
        int o = __offset(20);
        return o != 0 ? __union(obj, o + bb_pos) : null;
    }

    public static void startMonster(FlatBufferBuilder builder) {
        builder.startTable(9);
    }

    public static void addPos(FlatBufferBuilder builder, int posOffset) {
        builder.addStruct(0, posOffset, 0);
    }

    public static void addMana(FlatBufferBuilder builder, short mana) {
        builder.addShort(1, mana, 150);
    }

    public static void addHp(FlatBufferBuilder builder, short hp) {
        builder.addShort(2, hp, 100);
    }

    public static void addName(FlatBufferBuilder builder, int nameOffset) {
        builder.addOffset(3, nameOffset, 0);
    }

    public static void addInventory(FlatBufferBuilder builder, int inventoryOffset) {
        builder.addOffset(5, inventoryOffset, 0);
    }

    public static int createInventoryVector(FlatBufferBuilder builder, byte[] data) {
        return builder.createByteVector(data);
    }

    public static int createInventoryVector(FlatBufferBuilder builder, ByteBuffer data) {
        return builder.createByteVector(data);
    }

    public static void startInventoryVector(FlatBufferBuilder builder, int numElems) {
        builder.startVector(1, numElems, 1);
    }

    public static void addColor(FlatBufferBuilder builder, byte color) {
        builder.addByte(6, color, 3);
    }

    public static void addTestType(FlatBufferBuilder builder, byte testType) {
        builder.addByte(7, testType, 0);
    }

    public static void addTest(FlatBufferBuilder builder, int testOffset) {
        builder.addOffset(8, testOffset, 0);
    }

    public static int endMonster(FlatBufferBuilder builder) {
        int o = builder.endTable();
        return o;
    }

    public static void finishMonsterBuffer(FlatBufferBuilder builder, int offset) {
        builder.finish(offset);
    }

    public static void finishSizePrefixedMonsterBuffer(FlatBufferBuilder builder, int offset) {
        builder.finishSizePrefixed(offset);
    }

    public static final class Vector extends BaseVector {
        public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) {
            __reset(_vector, _element_size, _bb);
            return this;
        }

        public Monster get(int j) {
            return get(new Monster(), j);
        }

        public Monster get(Monster obj, int j) {
            return obj.__assign(__indirect(__element(j), bb), bb);
        }
    }
}

